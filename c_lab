Here's a simple implementation of a stack using a linked list in C:

```
#include <stdio.h>
#include <stdlib.h>

// Define the structure for a stack node
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Define the structure for the stack
typedef struct Stack {
    Node* top;
} Stack;

// Function to create a new stack node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory error\n");
        return NULL;
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to create a new stack
Stack* createStack() {
    Stack* newStack = (Stack*)malloc(sizeof(Stack));
    if (!newStack) {
        printf("Memory error\n");
        return NULL;
    }
    newStack->top = NULL;
    return newStack;
}

// Function to check if the stack is empty
int isEmpty(Stack* stack) {
    return stack->top == NULL;
}

// Function to push an element onto the stack
void push(Stack* stack, int data) {
    Node* newNode = createNode(data);
    if (stack->top) {
        newNode->next = stack->top;
    }
    stack->top = newNode;
}

// Function to pop an element from the stack
int pop(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty\n");
        return -1;
    }
    int data = stack->top->data;
    Node* temp = stack->top;
    stack->top = stack->top->next;
    free(temp);
    return data;
}

// Function to get the top element of the stack
int peek(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty\n");
        return -1;
    }
    return stack->top->data;
}

// Function to print the stack elements
void printStack(Stack* stack) {
    Node* temp = stack->top;
    while (temp) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

int main() {
    // Create a new stack
    Stack* stack = createStack();

    // Push elements onto the stack
    push(stack, 1);
    push(stack, 2);
    push(stack, 3);

    // Print the stack elements
    printf("Stack elements: ");
    printStack(stack);

    // Pop an element from the stack
    int popped = pop(stack);
    printf("Popped element: %d\n", popped);

    // Print the stack elements after popping
    printf("Stack elements after popping: ");
    printStack(stack);

    // Get the top element of the stack
    int top = peek(stack);
    printf("Top element: %d\n", top);

    return 0;
}
```

This implementation provides the following functions:

- `createNode`: Creates a new stack node with the given data.
- `createStack`: Creates a new stack.
- `isEmpty`: Checks if the stack is empty.
- `push`: Pushes an element onto the stack.
- `pop`: Pops an element from the stack.
- `peek`: Gets the top element of the stack.
- `printStack`: Prints the stack elements.

The `main` function demonstrates the usage of these functions by creating a stack, pushing elements, popping an element, and printing the stack elements.